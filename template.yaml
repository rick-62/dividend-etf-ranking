AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9

  Sample SAM Template for dividend-etf-ranking

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        RAW_BUCKET: !Sub "${AWS::StackName}-raw-data"
        INTERMEDIATE_BUCKET: !Sub "${AWS::StackName}-intermediate-data"
        PRIMARY_BUCKET: !Sub "${AWS::StackName}-primary-data"

Conditions:
  isProd: 
    !Equals [!Sub "${AWS::StackName}", "dividend-etf-ranking-prod"]

Resources:

# S3

  S3BucketRawData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-raw-data"

  S3BucketIntermediateData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-intermediate-data"

  S3BucketPrimaryData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-primary-data"

# Lambda

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./hello_world
      DockerTag: python3.9-v1

  FreetradeTransform:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketRawData   # This must be the name of an S3 bucket declared in the same template file
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix      # or "suffix"
                  Value: freetrade_stocks.csv   # The value to search for in the S3 object key names
      Environment:
        Variables:
          FILEIN: freetrade_stocks.csv
          FILEOUT: freetrade_transformed.csv
      Policies:  
        - S3CrudPolicy:
            BucketName: !Ref S3BucketIntermediateData
        - Version: '2012-10-17' # Policy Document to allow S3 access
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub 'arn:aws:s3:::${AWS::StackName}-raw-data/*'
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/freetrade_transform
      DockerTag: python3.9-v1

  ExtractETFList:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 15
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: !if [isProd, "cron(0 6 ? * 1 *)", "cron(0 6 ? * 1 1970)"]  # 0mins 6hrs, regardless of day of month, every month, every Sunday, every year (6am every Sunday)
      Environment:
        Variables:
          FILEIN: "freetrade_transformed.csv"
          QUEUE_URL: !Ref SqsEtfQueue
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketIntermediateData
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SqsEtfQueue.QueueName
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/extract_etf_list
      DockerTag: python3.9-v1

  ScrapeETFData:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 15
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          FOLDER_OUT: "justetf_scraped_data/"
      Policies:
        - SQSPollerPolicy:
            QueueName: !Ref SqsEtfQueue
        - S3CrudPolicy:
            BucketName: !Ref S3BucketIntermediateData
      ReservedConcurrentExecutions: 1 # concurrent limit
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsEtfQueue.Arn
            BatchSize: 1
    DependsOn: SqsEtfQueue
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/scrape_etf_data
      DockerTag: python3.9-v1


  CombineETFData:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 10
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        S3Event2:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketIntermediateData   # This must be the name of an S3 bucket declared in the same template file
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix      # or "suffix"
                  Value: justetf_scraped_data   # The value to search for in the S3 object key names
      Environment:
        Variables:
          FOLDER_IN: "justetf_scraped_data/"
          FILEOUT: "dividend_summary.csv"
          FILEIN: "freetrade_transformed.csv"
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3BucketPrimaryData
        - Version: '2012-10-17' # Policy Document to allow S3 access
          Statement:
            - Effect: Allow
              Action: 
                - s3:GetObject
                - s3:ListBucket
              Resource: 
                - !Sub 'arn:aws:s3:::${AWS::StackName}-intermediate-data'
                - !Sub 'arn:aws:s3:::${AWS::StackName}-intermediate-data/*'
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/combine_etf_data
      DockerTag: python3.9-v1


# SQS

  SqsEtfQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 1  # delay before messages appears in the queue
      MessageRetentionPeriod: 1000  # the amount seconds the message stays in the queue before getting removed (default is 4 days)
      VisibilityTimeout: 1000 # the amount seconds the message is consumed for and disappears from the queue (note: consumer must delete the message from the queue after receiving and processing it)


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  FreetradeTransform:
    Description: "Transform Freetrade stock list"
    Value: !GetAtt FreetradeTransform.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  
